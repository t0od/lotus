// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScClient is the client API for Sc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScClient interface {
	GetSectorID(ctx context.Context, in *SectorIDRequest, opts ...grpc.CallOption) (*SectorIDResponse, error)
}

type scClient struct {
	cc grpc.ClientConnInterface
}

func NewScClient(cc grpc.ClientConnInterface) ScClient {
	return &scClient{cc}
}

func (c *scClient) GetSectorID(ctx context.Context, in *SectorIDRequest, opts ...grpc.CallOption) (*SectorIDResponse, error) {
	out := new(SectorIDResponse)
	err := c.cc.Invoke(ctx, "/proto.Sc/GetSectorID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScServer is the server API for Sc service.
// All implementations must embed UnimplementedScServer
// for forward compatibility
type ScServer interface {
	GetSectorID(context.Context, *SectorIDRequest) (*SectorIDResponse, error)
	mustEmbedUnimplementedScServer()
}

// UnimplementedScServer must be embedded to have forward compatible implementations.
type UnimplementedScServer struct {
}

func (UnimplementedScServer) GetSectorID(context.Context, *SectorIDRequest) (*SectorIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectorID not implemented")
}
func (UnimplementedScServer) mustEmbedUnimplementedScServer() {}

// UnsafeScServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScServer will
// result in compilation errors.
type UnsafeScServer interface {
	mustEmbedUnimplementedScServer()
}

func RegisterScServer(s grpc.ServiceRegistrar, srv ScServer) {
	s.RegisterService(&Sc_ServiceDesc, srv)
}

func _Sc_GetSectorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScServer).GetSectorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sc/GetSectorID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScServer).GetSectorID(ctx, req.(*SectorIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sc_ServiceDesc is the grpc.ServiceDesc for Sc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Sc",
	HandlerType: (*ScServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSectorID",
			Handler:    _Sc_GetSectorID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc.proto",
}
